import webbrowser
import time
import pyperclip
import tkinter
import pyautogui
import subprocess
import sys
import os
from pynput.keyboard import Key, Controller

# pyinstaller -w -F -i "C:\Users\Chw\Desktop\PROG\web coding\playin\boty\launcher\bloon.ico" launcher.py

botCode = 'bot ? bot.stop() : null;\n{\n    const addIdAndClasses = (el, id = null, classes = null) => {\n        if (id)\n            el.id = controllerId;\n\n        if (classes)\n            el.classList.add(...classes);\n    }\n\n    const handleBtnClick = (btn, fn) => {\n        const state = btn.classList.contains(\'btn-on\');\n        btn.classList.toggle(\'btn-on\');\n        bot.text[fn](state);\n        return state;\n    }\n\n    const download = (data, filename, type) => {\n        var file = new Blob([data], {\n            type: type\n        });\n        if (window.navigator.msSaveOrOpenBlob) // IE10+\n            window.navigator.msSaveOrOpenBlob(file, filename);\n        else { // Others\n            var a = document.createElement(\"a\"),\n                url = URL.createObjectURL(file);\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            setTimeout(function () {\n                document.body.removeChild(a);\n                window.URL.revokeObjectURL(url);\n            }, 0);\n        }\n    }\n\n    const editBtn = document.createElement(\'span\');\n    editBtn.innerHTML = \'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path d=\"M18 14.45v6.55h-16v-12h6.743l1.978-2h-10.721v16h20v-10.573l-2 2.023zm1.473-10.615l1.707 1.707-9.281 9.378-2.23.472.512-2.169 9.292-9.388zm-.008-2.835l-11.104 11.216-1.361 5.784 5.898-1.248 11.103-11.218-4.536-4.534z\"/></svg>\'\n    editBtn.classList.add(\'editBtn\', \'queue-icon\');\n\n    const handleBtn = document.createElement(\'span\');\n    handleBtn.innerHTML = \'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path d=\"M24 12l-6-5v4h-5v-5h4l-5-6-5 6h4v5h-5v-4l-6 5 6 5v-4h5v5h-4l5 6 5-6h-4v-5h5v4z\"/></svg>\'\n    handleBtn.classList.add(\'bot-handle\', \'queue-icon\');\n\n    const removeBtn = document.createElement(\'span\');\n    removeBtn.innerHTML = \'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z\"/></svg>\';\n    removeBtn.classList.add(\'bot-remove\', \'queue-icon\');\n\n    var bot = {\n\n        version: \'2.2\',\n        botInterval: null,\n        fakeTypeInterval: null,\n        condInterval: null,\n        rate: 500,\n        condRate: 1000,\n        isRunning: false,\n        isAutoNext: false,\n        isFirstRun: true,\n        isQueueRunning: true,\n        isCondsRunning: true,\n\n        cp: {\n            btn: \'\',\n            btnAutoNext: \'\',\n            panel: \'\',\n            rateController: \'\',\n            rateText: \'\',\n            listForm: \'\',\n            addToList: \'\',\n            isHidden: false,\n            position: \'left\',\n\n            init() {\n                const body = document.querySelector(\'body\');\n\n                const oldBotPanel = document.querySelector(\'#botPanel\');\n                oldBotPanel ? (oldBotPanel.remove()) : null;\n\n                const oldSortablejs = document.querySelector(\'#sortablejs\');\n                oldSortablejs ? (oldSortablejs.remove()) : null;\n\n                const sortablejs = document.createElement(\'script\');\n                sortablejs.id = \'sortablejs\';\n                sortablejs.src = \'https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js\';\n                body.appendChild(sortablejs);\n\n                const constructCond = (ifval, thenval) => {\n                    return msg = {\n                        ifs: [ifval],\n                        thens: [thenval]\n                    }\n                }\n\n                sortablejs.addEventListener(\'load\', () => {\n                    Sortable.create(this.list, {\n                        group: \'botQueue\',\n                        animation: 100,\n                        handle: \'.bot-handle\',\n                        onEnd: e => {\n                            const kids = this.list.children;\n                            const newTextArr = [];\n        \n                            for (let i = 0; i < kids.length; i++) {\n                                kid = kids[i];\n                                // if(!kid.classList.contains(\'bot-handle\') && !kid.classList.contains(\'editBtn\'))\n                                newTextArr.push(kid.textContent);\n                            }\n        \n                            bot.text.mutateTextArr(newTextArr);\n                        }\n                    });\n\n                    Sortable.create(this.condList, {\n                        group: \'botConds\',\n                        animation: 100,\n                        handle: \'.bot-handle\',\n                        onEnd: e => {\n                            const kids = this.condList.children;\n                            const newTextArr = [];\n        \n                            for (let i = 0; i < kids.length; i++) {\n                                const ifContent = kids[i].children[0].textContent;\n                                const thenContent = kids[i].children[1].textContent;\n                                \n                                const cond = constructCond(ifContent, thenContent);\n                                newTextArr.push(cond);\n                            }\n        \n                            bot.text.mutateTextArr(newTextArr);\n                        }\n                    })\n                })\n\n                this.all = document.createElement(\'div\');\n                this.all.id = \'bot--all-without-hide-btn\'\n\n                const createParentDivAndAppend = (el, childEl, parentEl = \'all\', elType = \'div\') => { //childEl must be an array\n                    this[el] = document.createElement(elType);\n\n                    for (let i = 0; i < childEl.length; i++) {\n                        this[el].appendChild(this[childEl[i]]);\n                    }\n                    this[parentEl].appendChild(this[el]);\n                }\n\n                const createCheckbox = (parentEl, el, setFunction, label, checked = false, disabled = false, fn) => {\n                    this[el] = document.createElement(\'input\');\n                    this[el].type = \'checkbox\';\n                    this[el].checked = checked;\n                    this[el].disabled = disabled;\n                    this[el].addEventListener(\'change\', e => {\n                        const chked = e.target.checked;\n                        bot.text[setFunction](chked);\n                        if (fn) fn(chked)\n                    });\n\n                    createParentDivAndAppend(parentEl, [el], \'all\', \'label\');\n                    this[parentEl].appendChild(document.createTextNode(label));\n                }\n\n                const createBtn = (btn, text, classes, clickFn, parentEl = \'all\') => {\n                    this[btn] = document.createElement(\'button\');\n                    // this[btn].type = \'button\';\n                    addIdAndClasses(this[btn], null, classes);\n                    this[btn].appendChild(document.createTextNode(text));\n                    this[btn].addEventListener(\'click\', clickFn);\n                    this[parentEl].appendChild(this[btn]);\n                }\n\n                const createRange = (parentEl, parentElId, label, labelText, controller, controllerId, min, max, value, step, fn) => {\n                    this[label] = document.createElement(\'span\');\n                    this[label].innerHTML = labelText;\n\n                    this[controller] = document.createElement(\'input\');\n                    this[controller].id = controllerId;\n                    this[controller].type = \'range\';\n                    this[controller].min = min;\n                    this[controller].max = max;\n                    this[controller].value = value;\n                    this[controller].step = step;\n                    this[controller].addEventListener(\'input\', fn);\n\n                    createParentDivAndAppend(parentEl, [label, controller])\n                    this.rate.id = parentElId;\n                }\n\n                const appendElWithText = (el, classes, text = \'none\', parentEl = \'all\', elType = \'div\') => {\n                    this[el] = document.createElement(elType);\n                    this[el].classList.add(...classes);\n                    const textEl = document.createTextNode(text);\n\n                    this[el].appendChild(textEl);\n                    this[parentEl].appendChild(this[el]);\n                }\n\n                createBtn(\'hideBtn\', \'HIDE\', [\'bot--btn\', \'bot--hide-btn\'],\n                    e => {\n                        this.toggleHide();\n                    });\n\n                // body.addEventListener(\"keydown\", e => {\n                //     if (e.key === \'h\') {\n                //         this.toggleHide();\n                //     }\n                // });\n\n                this.panel = document.createElement(\'div\');\n                this.panel.id = \'botPanel\';\n\n                this.onOffSwitches = document.createElement(\'div\');\n                this.onOffSwitches.classList.add(\'onOffSwitches\');\n\n                createBtn(\'btn\', \'ON/OFF\', [\'bot--btn\', \'bot--switch\'],\n                    e => {\n                        bot.toggle();\n                    }, \'onOffSwitches\');\n                createBtn(\'queueBtn\', \'Queue\', [\'bot--btn\', \'btn-on\', \'onOffSpecific\'],\n                    e => {\n                        bot.onOffSpecific(\'queue\');\n                    }, \'onOffSwitches\');\n                createBtn(\'conditsBtn\', \'Condits\', [\'bot--btn\', \'btn-on\', \'onOffSpecific\'],\n                    e => {\n                        bot.onOffSpecific(\'conds\');\n                    }, \'onOffSwitches\');\n\n                this.all.appendChild(this.onOffSwitches);\n\n                createCheckbox(\'loopDiv\', \'loopBox\', \'setLoop\', \'Loop \', true);\n                createCheckbox(\'replyDiv\', \'replyBox\', \'setReply\', \'Reply Mode \', false, false, (chked) => {\n                    this.replyAllDiv.classList.toggle(\'unactive\');\n                    this.replyAllBox.disabled = !chked;\n                });\n                createCheckbox(\'replyAllDiv\', \'replyAllBox\', \'setReplyAll\', \'Send whole queue\', false, true);\n                addIdAndClasses(this.replyAllDiv, null, [\'bot--box-l2\', \'unactive\']);\n                createCheckbox(\'randomDiv\', \'randomBox\', \'setRandom\', \'Random\');\n                createCheckbox(\'realTypeDiv\', \'realTypeBox\', \'setRealType\', \'Real Type™\');\n                createCheckbox(\'fakeTypeDiv\', \'fakeTypeBox\', \'setFakeType\', \'Fake Typing\');\n\n                createRange(\'rate\', \'bot--rate\', \'rateText\', \'Send once/<span id=\"bot--rate-gauge\">\' + bot.rate + \'ms</span>\', \'rateController\', \'bot--rate-controller\', 0, 10000, bot.rate, 1,\n                    e => {\n                        let rate = e.target.value;\n                        bot.changeRate(rate);\n                    });\n                setTimeout(() => this.rateGauge = document.querySelector(\'#bot--rate-gauge\'), 0);\n\n                createBtn(\'btnAutoNext\', \'Auto Next\', [\'bot--btn\', \'bot--auto-next\'],\n                    e => {\n                        bot.toggleAutoNext();\n                    });\n                // ################################################################################################\n                createBtn(\'conditsSwitch\', \'conditionals >\', [\'bot--condits-switch\', \'bot--btn\'], this.handleConditsSwitch.bind(this));\n\n                const createSelect = (parentDiv, parentClasses, select, optionsArr, label, selectFn) => {\n                    this[parentDiv] = document.createElement(\'div\');\n                    this[parentDiv].classList.add(...parentClasses);\n                    this[select] = document.createElement(\'select\');\n\n                    for (let i = 0; i < optionsArr.length; i++) {\n                        const opt = document.createElement(\'option\');\n\n                        opt.appendChild(document.createTextNode(optionsArr[i]));\n                        opt.value = optionsArr[i];\n                        this[select].appendChild(opt);\n                    }\n                    this[parentDiv].appendChild(document.createTextNode(label));\n                    this[parentDiv].appendChild(this[select]);\n\n                    this[select].addEventListener(\'change\', selectFn);\n                }\n\n                //##############################################################################################################################\n\n                createParentDivAndAppend(\'tempCondForm\', [\'conditsSwitch\']);\n                addIdAndClasses(this.tempCondForm, null, [\'bot--container\']);\n\n                this.condIfInput = document.createElement(\'input\');\n                this.condIfInput.placeholder = \'can be RegEx (eg. /regex/)\';\n                this.condIfInput.required = true;\n                this.condIfLabel = document.createTextNode(\'IF: \');\n                this.condThenInput = document.createElement(\'input\');\n                this.condThenInput.required = true;\n                this.condThenLabel = document.createTextNode(\'THEN: \');\n\n                createSelect(\'condTemplates\', [\'bot--cond-templates\'], \'selectCondTemplate\', [\'NONE\', \'fake k/m17\'], \'Template \', e => {\n                    bot.text.setTemplate(e.target.value);\n                });\n                createParentDivAndAppend(\'condTemplatesDiv\', [\'condTemplates\']);\n                this.condTemplatesDiv.classList.add(\'templates-modes-div\');\n                createParentDivAndAppend(\'condIfDiv\', [\'condIfLabel\', \'condIfInput\']);\n                createParentDivAndAppend(\'condThenDiv\', [\'condThenLabel\', \'condThenInput\']);\n\n                createBtn(\'removeCondsBtn\', \'X\', [\'bot--btn\'], e => {\n                    bot.text.removeQueue();\n                });\n\n                this.removeCondsBtn.type = \'button\';\n\n                this.sub = document.createElement(\'input\');\n                this.sub.type = \'submit\';\n                this.sub.classList.add(\'necessary_submit\');\n\n                createParentDivAndAppend(\'condControl\', [\'condIfDiv\', \'condThenDiv\', \'removeCondsBtn\', \'sub\']);\n                this.condControl.classList.add(\'bot--list-control\');\n\n                this.condList = document.createElement(\'div\');\n                this.condList.classList.add(\'bot--list\');\n                this.condList.addEventListener(\'mouseup\', e => {\n                    handleBtns(e.target);\n                    // if(e.target.closest(\'.bot-remove\'))\n                    //     bot.text.removeMessage(e.target.closest(\'.bot--queue-item\').dataset.id);\n                });\n\n                createParentDivAndAppend(\'condForm\', [\'condTemplatesDiv\', \'condControl\', \'condList\'], \'all\', \'form\');\n                this.condForm.classList.add(\'cond-form\', \'unactive-form\');\n                \n                this.condForm.addEventListener(\'submit\', e => {\n                    e.preventDefault();\n                    const ifval = this.condIfInput.value;\n                    const thenval = this.condThenInput.value;\n                    \n                    bot.text.addMessage(constructCond(ifval, thenval));\n\n                    this.condIfInput.value = this.condThenInput.value = \'\';\n                });\n\n                //#############################################################################################\n\n                this.addToList = document.createElement(\'input\');\n                this.addToList.placeholder = \'Add to message queue\';\n                this.addToList.setAttribute(\'style\', \'width: 80%\');\n\n                createBtn(\'resetQueueBtn\', \'R\', [\'bot--btn\'], e => {\n                    bot.text.reset();\n                });\n\n                createBtn(\'removeQueueBtn\', \'X\', [\'bot--btn\'], e => {\n                    bot.text.removeQueue();\n                });\n                this.removeQueueBtn.id = \'bot--remove-queue\';\n\n                this.upperDiv = document.createElement(\'div\');\n                this.upperDiv.classList.add(\'bot--list-control\');\n                this.upperDiv.appendChild(this.addToList);\n                this.upperDiv.appendChild(this.resetQueueBtn);\n                this.upperDiv.appendChild(this.removeQueueBtn);\n\n                this.list = document.createElement(\'div\');\n                this.list.classList.add(\'bot--list\');\n\n                let editingListItemId = null;\n                body.addEventListener(\'mousedown\', e => {\n\n                    if(!e.target.classList.contains(\'editInput\')) {\n                        \n                        if (!e.target.closest(\'.editBtn\')){\n                            bot.text.updateListItem(editingListItemId);\n                            editingListItemId = null;\n                            // bot.text.updateList();\n                        }\n                        if(editingListItemId){\n                            bot.text.updateListItem(editingListItemId);\n                            editingListItemId = null;\n                        }\n                    }\n                })\n\n                const handleBtns = (target) => {\n                    const item = target.closest(\'.bot--queue-item\');\n                    \n                    if(target.closest(\'.editBtn\')){\n                        setTimeout(() => {\n                            const isCond = item.classList.contains(\'bot--cond-item\');\n\n                            const itemId = item.dataset.id;\n                            const itemContent = isCond ? bot.text.condArr[itemId] : bot.text.textArr[itemId];\n        \n                            const form = document.createElement(\'form\');\n                            const inp = document.createElement(\'input\');\n\n                            let modifiedPart = null;\n                            let elementToModify = null;\n                            let modifiedPartContent = null;\n                            if(isCond){\n                                if (elementToModify = target.closest(\'.if-part\')){\n                                    modifiedPart = \'ifs\';\n                                    modifiedPartContent = itemContent.ifs;\n                                } else {\n                                    elementToModify = target.closest(\'.then-part\');\n                                    modifiedPart = \'thens\';\n                                    modifiedPartContent = itemContent.thens;\n                                }\n                                inp.value = modifiedPartContent[0];\n                            } else {\n                                elementToModify = item;\n                                inp.value = itemContent;\n                            }\n                            inp.classList.add(\'editInput\');\n                            form.appendChild(inp);\n                            elementToModify.innerHTML = \'\';\n                            elementToModify.appendChild(form);\n                            editingListItemId = itemId;\n        \n                            inp.focus();\n        \n                            form.addEventListener(\'submit\', e => {\n                                e.preventDefault();\n        \n                                const editedValue = inp.value;\n                                let contentToReplace = editedValue;\n                                if(isCond){\n                                    let contentCopy = {...itemContent};\n                                    contentCopy[modifiedPart][0] = editedValue;\n                                    contentToReplace = contentCopy;\n                                }\n                                bot.text.edit(itemId, contentToReplace);\n                                editingListItemId = null;\n                            });\n                        }, 0)\n                    } else if(target.closest(\'.bot-remove\')) {\n                        bot.text.removeMessage(item.dataset.id);\n                    }\n                }\n\n                this.list.addEventListener(\'click\', e => {\n                    handleBtns(e.target);\n                });\n\n                createSelect(\'modes\', [\'bot--modes\'], \'selectMode\', [\'NONE\', \'increment\', \'parrot\', \'parrot+\'], \'Mode \', e => {\n                    bot.text.setMode(e.target.value);\n                });\n                createSelect(\'templates\', [\'bot--templates\'], \'select\', [\'NONE\', \'waves\', \'Bałkanica\'], \'Template \', e => {\n                    bot.text.setTemplate(e.target.value);\n                });\n\n                createParentDivAndAppend(\'templatesModesDiv\', [\'modes\', \'templates\']);\n                this.templatesModesDiv.classList.add(\'templates-modes-div\');\n\n                createParentDivAndAppend(\'listForm\', [\'templatesModesDiv\', \'upperDiv\', \'list\'], \'all\', \'form\')\n                this.listForm.addEventListener(\'submit\', e => {\n                    e.preventDefault();\n                    \n                    const msg = this.addToList.value;\n                    bot.text.addMessage(msg);\n\n                    this.addToList.value = \'\';\n                });\n\n                const imp = () => {\n                    const sep = this.impSeparation.value;\n                    const file = this.importFile.files;\n                    const text = this.importInput.value;\n                    const inp = text ? text : file;\n\n                    bot.text.import(sep, inp);\n                }\n\n                this.expImp = document.createElement(\'div\');\n                this.exportDiv = document.createElement(\'div\');\n                this.importDiv = document.createElement(\'form\');\n                this.importDiv.addEventListener(\'submit\', e => {\n                    e.preventDefault();\n                    imp();\n                });\n                this.expImp.classList.add(\'bot--expimp\');\n                createBtn(\'exportBtn\', \'< Export >\', [\'bot--btn\', \'bot--export\'],\n                    e => {\n                        const name = this.expName.value;\n                        bot.text.export(name);\n                    }, \'exportDiv\');\n\n                createBtn(\'importBtn\', \'> Import <\', [\'bot--btn\', \'bot--import\'],\n                    e => {\n                        // imp();\n                    }, \'importDiv\');\n\n                this.expName = document.createElement(\'input\');\n                this.expName.placeholder = \'file name\';\n                this.expName.id = \'bot--expName\';\n\n                this.impSeparation = document.createElement(\'input\');\n                this.impSeparation.placeholder = \'sep.\';\n                this.impSeparation.id = \'bot--impSep\';\n\n                this.importFile = document.createElement(\'input\');\n                this.importFile.type = \'file\';\n\n                this.exportDiv.classList.add(\'bot--export-div\');\n                this.exportDiv.appendChild(this.expName);\n                this.importDiv.classList.add(\'bot--import-div\');\n                this.importDiv.appendChild(this.impSeparation);\n                this.importDiv.appendChild(this.importFile);\n\n                this.importInput = document.createElement(\'textarea\');\n                this.importInput.placeholder = \'Paste or type in some text to import\';\n                this.importDiv.appendChild(this.importInput);\n\n                this.expImp.appendChild(this.exportDiv);\n                this.expImp.appendChild(this.importDiv);\n                this.all.appendChild(this.expImp);\n\n                this.panel.appendChild(this.hideBtn);\n                createBtn(\'sideSwitch\', \'<|>\', [\'sideSwitch\', \'bot--btn\'], e => {\n                    this.panel.style.setProperty(\'right\', this.position === \'right\' ? \'initial\' : 0);\n\n                    this.position = (this.position === \'right\' ? \'left\' : \'right\');\n                }, \'panel\')\n                appendElWithText(\'title\', [\'bot--title\'], \'Bl🎈🎈nBot v\' + bot.version, \'panel\');\n                this.panel.appendChild(this.all);\n\n                body.insertBefore(this.panel, body.firstChild);\n\n                this.stylize();\n            },\n\n            handleConditsSwitch(e){\n                this.conditsSwitch.textContent = bot.text.isConditsShown ? \'conditionals >\' : \'< queue\';\n                handleBtnClick(this.conditsSwitch, \'toggleCondits\');\n                \n                this.listForm.classList.toggle(\'unactive-form\');\n                this.condForm.classList.toggle(\'unactive-form\');\n            },\n\n            toggleHide(){\n                if (this.isHidden) {\n                    this.hideBtn.style.setProperty(\'background\', \'red\');\n                    this.all.style.setProperty(\'display\', \'flex\');\n                } else {\n                    this.hideBtn.style.setProperty(\'background\', \'green\')\n                    this.all.style.setProperty(\'display\', \'none\');\n                }\n                this.isHidden = !this.isHidden;\n            },\n\n            stylize() {\n                const css = `\n                    #botPanel {\n                        color: white;\n                        padding: 10px;\n                        z-index: 1000;\n                        position: absolute;\n                        width: 450px;\n                        background: #0008;\n                        box-sizing: border-box;\n                    }\n\n                    .sideSwitch {\n                        margin-left: 10px;\n                    }\n\n                    #botPanel label *, #botPanel label {\n                        cursor: pointer;\n                    }\n\n                    .bot--title {\n                        display: inline-block;\n                        position: absolute;\n                        right: 10px;\n                        color: #fff8;\n                        font-weight: bold;\n                    }\n\n                    #bot--all-without-hide-btn {\n                        display: flex;\n                        flex-flow: column;\n                        justify-content: center;\n                        margin: 10px 0 0;\n                    }\n\n                    .bot--list {\n                        max-height: 20vh;\n                        overflow: auto;\n                    }\n\n                    .bot--container {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        margin-top: 10px;\n                    }\n\n                    .bot--queue-item {\n                        padding: 2px;\n                        background: #fff9;\n                        color: black;\n                        border-top: 1px solid #777;\n                        max-width: 100%;\n                        overflow: hidden;\n                        position: relative;\n                        text-overflow: ellipsis;\n                        white-space: nowrap;\n                    }\n\n                    .bot--queue-item.bot--cond-item {\n                        padding: 0px;\n                    }\n\n                    .bot--list-active-el {\n                        background: #fffc;\n                    }\n\n                    .bot--list-active-el::after {\n                        content: \'\';\n                        position: absolute;\n                        right: 0;\n                        top: 0;\n                        height: 100%;\n                        width: 25px;\n                        background-image: url(\"data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' width=\'64\' height=\'64\' fill=\'%23f55\' viewBox=\'0 0 640 640\' shape-rendering=\'geometricPrecision\' text-rendering=\'geometricPrecision\' image-rendering=\'optimizeQuality\' fill-rule=\'evenodd\' clip-rule=\'evenodd\'%3E%3Cpath d=\'M153.581 320L486.42 640.012V-.012L153.581 320z\'/%3E%3C/svg%3E\");\n                        background-position: left;\n                    }\n\n                    #bot--list-control input, .bot--queue-item {\n                        font-size: 15px;\n                    }\n\n                    #bot--rate {\n                        margin: 10px 0;\n                        color: white;\n                    }\n\n                    #bot--rate-controller {\n                        cursor: pointer;\n                        width: 100%;\n                    }\n\n                    #bot--rate-gauge {\n                        font-weight: bold;\n                    }\n\n                    .onOffSwitches {\n                        display: flex;\n                    }\n\n                    .onOffSwitches > * {\n                        flex: 1 0 40px;\n                    }\n\n                    .bot--btn {\n                        padding: 5px;\n                        background: red;\n                        color: white;\n                        border: 2px solid white;\n                        cursor: pointer;\n                        font-weight: bold;\n                    }\n\n                    .bot--switch {\n                        padding: 10px;\n                        flex: 3 0 200px;\n                    }\n\n                    .bot--remove-queue {\n                        padding: 2px 6px;\n                    }\n\n                    .bot--list-control {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        margin: 10px 0 5px;\n                    }\n\n                    .bot--expimp {\n                        margin: 10px 0 5px;\n                        display: flex;\n                        justify-content: space-around;\n                        flex-flow: column;\n                    }\n\n                    .bot--expimp input[type=\'file\']{\n                        width: 200px;\n                        margin-left: 10px;\n                    }\n\n                    .bot--expimp input{\n                        width: 100%;\n                    }\n\n                    .bot--expimp div {\n                        margin-top: 10px;\n                    }\n\n                    .bot--import {\n                        background: #8f8;\n                        margin-top: 10px;\n                        color: #080;\n                    }\n\n                    .bot--export {\n                        background: #f88;\n                        color: #800;\n                    }\n\n                    #bot--impSep {\n                        width: 25px;\n                        height: 15px;\n                    }\n\n                    #bot--expName {\n                        width: 60px;\n                    }\n\n                    textarea {\n                        width: 100%;\n                        resize: none;\n                    }\n\n                    .bot--box-l2 {\n                        margin-left: 20px;\n                    }\n\n                    .bot--box-l3 {\n                        margin-left: 30px;\n                    }\n\n                    #botPanel label.unactive {\n                        color: #aaa;\n                    }\n\n                    .bot--condits-switch {\n                        width: 35%;\n                        background: #f55 !important;\n                    }\n\n                    #botPanel .btn-on {\n                        background: green;\n                    }\n\n                    .unactive-form {\n                        display: none;\n                    }\n                    \n                    .cond-form .bot--list-control {\n                        font-weight: bold;\n                    }\n                    \n                    .cond-form input {\n                        width: 100%;\n                    }\n\n                    .bot--cond-item {\n                        display: flex;\n                    }\n\n                    .bot--cond-item > * {\n                        width: 50%;\n                        height: 100%;\n                        overflow: hidden;\n                        text-overflow: ellipsis;\n                        white-space: nowrap;\n                        padding: 2px;\n                    }\n\n                    .then-part {\n                        background: #f779;\n                    }\n\n                    .necessary_submit {\n                        display: none;\n                    }\n\n                    .templates-modes-div {\n                        margin-top: 10px;\n                        display: flex;\n                        justify-content: space-between;\n                    }\n\n                    .queue-icon {\n                        margin-right: 6px;\n                        cursor: pointer;\n                    }\n\n                    .editInput {\n                        width: 100%;\n                        box-sizing: border-box;\n                    }\n                `;\n                // active el - border: 1px solid #f55;\n\n                const style = document.createElement(\'style\');\n\n                style.id = \'botStyle\';\n\n                if (style.styleSheet) {\n                    style.styleSheet.cssText = css;\n                } else {\n                    style.appendChild(document.createTextNode(css));\n                }\n\n                const oldBotStyle = document.querySelector(\'#botStyle\');\n\n                oldBotStyle ? oldBotStyle.remove() : null;\n\n                document.getElementsByTagName(\'head\')[0].appendChild(style);\n            }\n        },\n\n        text: {\n            textArr: [\'🎈\'],\n            initCondArr: [{\n                ifs: [\'m\'],\n                thens: [\'k\']\n            }],\n            input: \'\',\n            counter: 0,\n            oldCounter: 0,\n            msgCounter: 0,\n            isLoop: true,\n            isReply: false,\n            isReplyAll: false,\n            isRandom: false,\n            isRealType: false,\n            isFakeType: false,\n            fakeTypeRate: 300,\n            initialRate: 500,\n            itemPause: 800,\n            mode: null,\n            msg: \'\',\n            isConditsShown: false,\n            counters: [\'counter\', \'oldCounter\'],\n\n            edit(id, val){\n                if(!this.isConditsShown)\n                    this.textArr[id] = val;\n                else\n                    this.condArr[id] = val;\n                this.updateList()\n            },\n\n            checkCond(){\n                const strangerMsg = this.getStrangerMsg();\n                if(strangerMsg){\n                    const strMsg = strangerMsg.trim().toLowerCase();\n\n                    for(let i=0; i<this.condListLength; i++){\n                        const conds = this.condArr[i];\n                        let ifCond = conds.ifs[0];\n                        const thenCond = conds.thens[0];\n\n                        if(/^\\/[\\s\\S]*\\//.test(ifCond)){ // check if ifconditional is a regex\n\n                            const userReg = ifCond.replace(/^\\/|\\/$/g, \'\');\n                            const reg = new RegExp(userReg);\n                            \n                            const m = strMsg.match(reg);\n                            \n                            if(m){\n                                this.insertMsg(thenCond);\n                                bot.sendMsg();\n                            }\n                        } else {\n                            ifCond = ifCond.trim().toLowerCase()\n                            if(strMsg === ifCond){\n                                this.insertMsg(thenCond);\n                                break;\n                            }\n                        }\n                    }\n                    bot.sendMsg();\n                }\n            },\n\n            checkCounters(){\n                for(const counterStr of this.counters){\n                    this[counterStr] = (this[counterStr]+1 > this.listLength) ? 0 : this[counterStr];\n                }\n            },\n\n            insert() {\n                if (this.listLength === 0) {\n                    bot.stop();\n                    alert(\'Empty queue!\');\n                } else {\n                    this.checkCounters()\n\n                    if (this.isRandom && !this.afterRandomChecked) {\n                        this.counter = Math.floor(Math.random() * this.listLength);\n                    }\n\n                    switch (this.mode) {\n                        case \'parrot\': {\n                            this.insertMsg(this.getStrangerMsg());\n                        }\n                        break;\n\n                        case \'parrot+\': {\n                            const msgRaw = this.textArr[this.counter];\n                            const msgSplted = msgRaw.split(\'$msg\', 2);\n\n                            let msg = \'\';\n                            if(msgSplted.length > 1){\n                                msg = msgSplted[0] + this.getStrangerMsg() + (msgSplted[1] ? msgSplted[1] : \'\');\n                            } else {\n                                msg = msgSplted[0];\n                            }\n                            this.insertFromQueue(msg);\n                        }\n                        break;\n\n                        case \'increment\': {\n                            this.initialMsg = this.textArr[0];\n                            this.msg += this.initialMsg;\n                            this.insertMsg(this.msg);\n                            this.msgCounter++;\n                        }\n                        break;\n\n                        default: {\n                            this.insertFromQueue(this.textArr[this.counter]);\n                        }\n                    }\n\n                    if (this.isRandom)\n                        this.afterRandomChecked = false;\n                \n                    this.setActiveListEl();\n                }\n            },\n\n            setActiveListEl(){\n                if(this.listLength){\n                    this.list.children[this.counter].classList.add(\'bot--list-active-el\');\n\n                    if (this.oldCounter !== this.counter)\n                        this.list.children[this.oldCounter].classList.remove(\'bot--list-active-el\');\n                    this.oldCounter = this.counter;\n                }\n            },\n\n            insertFromQueue(msg){\n                this.insertMsg(msg);\n                if (!this.isRandom) this.counter++;\n                \n                if (this.counter+1 > this.listLength) {\n                    if (!this.isRandom) this.counter = 0;\n                    if (!this.isLoop) bot.stop();\n                }\n            },\n\n            insertMsg(msg) {\n                this.input.value = msg;\n            },\n\n            getStrangerMsg() {\n                if(bot.isLastMsgStrangers()){\n                    const strangerMsg = bot.log.lastChild.textContent;\n                    return strangerMsg.replace(/Obcy:\\s/, \'\');\n                } else\n                    return null\n            },\n\n            setLoop(state) {\n                this.isLoop = state;\n            },\n\n            setReply(state) {\n                this.isReply = state;\n            },\n\n            setReplyAll(state) {\n                this.isReplyAll = state;\n            },\n\n            setRandom(state) {\n                this.isRandom = state;\n\n                if (state) {\n                    this.list.children[this.counter].classList.remove(\'bot--list-active-el\');\n                    this.counter = Math.floor(Math.random() * this.listLength);\n                    this.list.children[this.counter].classList.add(\'bot--list-active-el\');\n                    this.afterRandomChecked = true;\n                }\n            },\n\n            setRealType(state) {\n                this.isRealType = state;\n\n                if (!state) {\n                    bot.changeRate(this.initialRate);\n                } else {\n                    bot.changeRate(1500, false, true);\n                }\n            },\n\n            setFakeType(state) {\n                this.isFakeType = state;\n\n                if (!state)\n                    clearInterval(bot.fakeTypeInterval);\n\n                if (bot.isRunning) bot.start();\n            },\n\n            toggleCondits(state) {\n                this.isConditsShown = !state;\n\n                this.presentArr = state ? \'textArr\' : \'condArr\';\n                this.presentList = state ? \'list\' : \'condList\';\n                this.presentListLength = state ? \'listLength\' : \'condListLength\';\n\n                this.updateList();\n            },\n\n            realTypeSetup() {\n                if (this.isRealType) {\n                    const len = this.textArr[this.counter].length;\n\n                    bot.changeRate(this.initialRate / 10 * len + this.itemPause, true);\n                }\n            },\n\n            confirmListRemove(){\n                if(this[this.presentListLength] > 1)\n                    return confirm(\'This will clear the list of messages. Proceed?\')\n                else\n                    return true\n            },\n\n            setTemplate(temp) {\n                if(this.confirmListRemove()){\n                    let arr = \'\';\n\n                    if(!this.isConditsShown){\n                        switch (temp) {\n                            case \'waves\':\n                                arr = [\"🎈\", \"🎈🎈\", \"🎈🎈🎈\", \"🎈🎈🎈🎈\", \"🎈🎈🎈🎈🎈\", \"🎈🎈🎈🎈\", \"🎈🎈🎈\", \"🎈🎈\", \"🎈\"]\n                                break;\n                            case \'Bałkanica\':\n                                const text = \'Bałkańska w żyłach płynie krew,| kobiety, wino, taniec, śpiew.| Zasady proste w życiu mam,| nie rób drugiemu tego-| czego ty nie chcesz sam!| Muzyka, przyjaźń, radość, śmiech.| Życie łatwiejsze staje się.| Przynieście dla mnie wina dzban,| potem ruszamy razem w tan.| Będzie! Będzie zabawa!| Będzie się działo!| I znowu nocy będzie mało.| Będzie głośno, będzie radośnie| Znów przetańczymy razem całą noc.| Będzie! Będzie zabawa!| Będzie się działo!| I znowu nocy będzie mało.| Będzie głośno, będzie radośnie| Znów przetańczymy razem całą noc.| Orkiestra nie oszczędza sił| już trochę im brakuje tchu.| Polejcie wina również im| znów na parkiecie będzie dym.| Bałkańskie rytmy, Polska moc!| Znów przetańczymy całą noc.| I jeszcze jeden malutki wina dzban| i znów ruszymy razem w tan!| Będzie! Będzie zabawa!| Będzie się działo!| I znowu nocy będzie mało.| Będzie głośno, będzie radośnie| Znów przetańczymy razem całą noc.| Będzie! Będzie zabawa!| Będzie się działo!| I znowu nocy będzie mało.| Będzie głośno, będzie radośnie| Znów przetańczymy razem całą noc.|\';\n                                arr = text.split(\'|\');\n                                break;\n                            default:\n                                break;\n                        }\n                    } else {\n                        switch (temp) {\n                            case \'fake k/m17\':\n                                arr = [{\n                                    \"ifs\": [\"m\"],\n                                    \"thens\": [\"k\"]\n                                }, {\n                                    \"ifs\": [\"k\"],\n                                    \"thens\": [\"m\"]\n                                }, {\n                                    \"ifs\": [\"/.*lat.*/\"],\n                                    \"thens\": [\"17\"]\n                                }, {\n                                    \"ifs\": [\"/.*m[\\\\d].*/\"],\n                                    \"thens\": [\"k17\"]\n                                }, {\n                                    \"ifs\": [\"/.*k[\\\\d].*/\"],\n                                    \"thens\": [\"m17\"]\n                                }, {\n                                    \"ifs\": [\"hej\"],\n                                    \"thens\": [\"hej k\"]\n                                }, {\n                                    \"ifs\": [\"/^km.*/\"],\n                                    \"thens\": [\"k\"]\n                                }]\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    this.mutateTextArr(arr);\n                }\n                bot.cp.select.value = \'NONE\';\n            },\n\n            setMode(mode) {\n                if (mode === \'parrot\' || mode === \'parrot+\') {\n                    this.mode = (mode === \'parrot\') ? mode : \'parrot+\';\n                    const reply = bot.cp.replyBox;\n                    if (!reply.checked)\n                        reply.click();\n                } else if (mode !== \'NONE\')\n                    this.mode = mode;\n                else\n                    this.mode = null;\n\n                this.reset();\n            },\n\n            mutateTextArr(newArr, forceMode = false) {\n                if(!forceMode){\n                    this[this.presentArr] = newArr;\n                } else {\n                    this[forceMode === \'queue\' ? \'textArr\' : \'condArr\'] = newArr;\n                }\n\n                this.updateList(forceMode);\n            },\n\n            addMessage(msg) {\n                if (msg) {\n                    let finalItem = \'\';\n                    if(!this.isConditsShown){\n                        finalItem = msg.replace(/\\s/g, \'\\xa0\'); //\\xa0\n                    } else {\n                        finalItem = msg;\n                    }\n\n                    const newArr = [...this[this.presentArr], finalItem];\n                    this.mutateTextArr(newArr);\n                }\n            },\n\n            removeMessage(id) {\n                id = parseInt(id);\n\n                this[this.presentArr].splice(id, 1);\n                if(!this.isConditsShown){\n                    if((this.counter !== 0) && (id !== this.counter) && (id < this.counter))\n                        this.counter -= 1;\n                    else if(id === this.counter)\n                        this.reset();\n                }\n                this.updateList();\n            },\n\n            removeQueue() {\n                if(this.confirmListRemove())\n                    this.mutateTextArr(!this.isConditsShown ? [\'🎈\'] : [...this.initCondArr]);\n            },\n\n            updateListItem(id){\n                if(!this.isConditsShown){\n                    const itemElement = this.list.children[id];\n                    if(itemElement){\n                        itemElement.innerHTML = \'\';\n                        const el = this.createListItem(this[this.presentArr][id]);\n                        itemElement.appendChild(el);\n                    }\n                } else {\n                    const itemElement = this.condList.children[id];\n                    if(itemElement){\n                        itemElement.innerHTML = \'\';\n                        const el = this.createListItem(this[this.presentArr][id]);\n                        itemElement.appendChild(el);\n                    }\n                }\n            },\n\n            createListItem(message, id = null){\n                if(!this.isConditsShown){\n                    let container = null;\n                    if(typeof id !== \'number\'){\n                        container = document.createDocumentFragment();\n                    } else {\n                        container = document.createElement(\'div\');\n                        container.dataset.id = id;\n                        container.classList.add(\'bot--queue-item\');\n                    }\n\n                    const msg = document.createTextNode(message);\n                    \n                    const edBtn = editBtn.cloneNode(true);\n                    const handle = handleBtn.cloneNode(true);\n                    const remove = removeBtn.cloneNode(true);\n\n                    container.appendChild(remove);\n                    container.appendChild(handle);\n                    container.appendChild(edBtn);\n                    container.appendChild(msg);\n\n                    return container\n                } else {\n                    let container = null;\n                    \n                    if(typeof id !== \'number\'){\n                        container = document.createDocumentFragment();\n                    } else {\n                        container = document.createElement(\'div\');\n                        container.dataset.id = id;\n                        container.classList.add(\'bot--queue-item\', \'bot--cond-item\');\n                    }\n                    \n                    const ifPart = document.createElement(\'div\');\n                    const thenPart = document.createElement(\'div\');\n\n                    ifPart.classList.add(\'if-part\');\n                    thenPart.classList.add(\'then-part\');\n\n                    const handle = handleBtn.cloneNode(true);\n                    const edBtn = editBtn.cloneNode(true);\n                    const edThenBtn = edBtn.cloneNode(true);\n                    const remove = removeBtn.cloneNode(true);\n                    ifPart.appendChild(remove);\n                    ifPart.appendChild(handle);\n                    ifPart.appendChild(edBtn);\n                    thenPart.appendChild(edThenBtn);\n\n                    ifPart.appendChild(document.createTextNode(message.ifs[0])); //undefined ifs\n                    thenPart.appendChild(document.createTextNode(message.thens[0]));\n\n                    container.appendChild(ifPart);\n                    container.appendChild(thenPart);\n\n                    return container\n                }\n            },\n\n            updateList(forceMode = false) {\n                // console.trace();\n                \n                if(forceMode ? forceMode === \'queue\' : !this.isConditsShown){\n                    this.list.innerHTML = \'\';\n\n                    const frag = document.createDocumentFragment();\n\n                    this.textArr.map((item, id) => {\n                        if (item && item !== \' \' && item !== \'\\n\') {\n                            const itemNode = this.createListItem(item, parseInt(id));\n                            frag.appendChild(itemNode);\n                        } else {\n                            this.textArr.splice(id, 0);\n                        }\n\n                        this.list.appendChild(frag);\n                    });\n\n                    this.listLength = this.textArr.length;\n                    this.checkCounters()\n                    this.setActiveListEl();\n                } else {\n                    this.condList.innerHTML = \'\';\n                    const frag = document.createDocumentFragment();\n                    \n                    this.condArr.map((item, id) => {\n                        const container = this.createListItem(item, id)\n                        frag.appendChild(container);\n                    });\n                    this.condList.appendChild(frag);\n\n                    this.condListLength = this.condArr.length;\n                }\n            },\n\n            reset() {\n                if(!this.isConditsShown){\n                    // this.setActiveListEl();\n                    if (this.listLength) {\n                        this.checkCounters();\n                        this.list.children[this.counter+1 > this.listLength ? 0 : this.counter].classList.remove(\'bot--list-active-el\');\n                        this.list.children[0].classList.add(\'bot--list-active-el\');\n                    }\n                    this.counter = this.oldCounter = this.msgCounter = 0;\n                    this.msg = \'\';\n                }\n            },\n\n            export(fileName) {\n                const data = {\n                    settings: {\n                        boxes: {\n                            isLoop: this.isLoop,\n                            isReply: this.isReply,\n                            isReplyAll: this.isReplyAll,\n                            isRandom: this.isRandom,\n                            isRealType: this.isRealType,\n                            isFakeType: this.isFakeType\n                        },\n                        switches: {\n                            queue: bot.isQueueRunning,\n                            conds: bot.isCondsRunning\n                        },\n                        rate: bot.rate,\n                        mode: this.mode\n                    },\n                      \n                    textArr: this.textArr,\n                    condArr: this.condArr\n                }\n\n                download(JSON.stringify(data), (fileName ? fileName : this.textArr[0]) + \'.json\', \'text/plain\');\n            },\n\n            import(sep, input) {\n                const isPlainText = (typeof input === \'string\');\n\n                const splitText = (text) => {\n                    if (sep === \'\\\\n\')\n                        sep = \'\\n\';\n\n                    const arr = text.split(sep);\n                    this.mutateTextArr(arr);\n                }\n\n                if (!isPlainText) {\n                    const processFile = (e) => {\n                        const text = e.target.result;\n                        const data = JSON.parse(text);\n\n                        this.mutateTextArr(data.textArr, \'queue\');\n                        this.mutateTextArr(data.condArr, \'conds\');\n                        // if(!data.settings.switches.queue && data.settings.switches.conds){\n                        //     if(!this.isConditsShown){\n                        //         // bot.cp.handleConditsSwitch();\n                        //     }\n                        // }\n\n                        const keys = Object.keys(data.settings.boxes);\n                        const vals = Object.values(data.settings.boxes);\n                        const cp = bot.cp;\n                        \n                        for(let i=0; i<keys.length; i++){\n                            const key = keys[i];\n                            const val = vals[i];\n                            \n                            if(this[key] !== val){\n                                const noIsKey = key.slice(2,3).toLowerCase() + key.slice(3);\n                                const box = noIsKey+\'Box\';\n                                const boxEl = cp[box];\n                                boxEl.click();\n                            }\n                        }\n\n                        bot.changeRate(data.settings.rate, false, true);\n                        this.setMode(data.settings.mode);\n\n                        const switches = data.settings.switches;\n                        bot.onOffSpecific(\'queue\', switches.queue);\n                        bot.onOffSpecific(\'conds\', switches.conds);\n                    }\n\n                    if (!window.FileReader) {\n                        alert(\'Your browser is not supported\');\n                        return false;\n                    }\n                    // Create a reader object\n                    var reader = new FileReader();\n                    if (input.length) {\n                        var textFile = input[0];\n                        // Read the file\n                        reader.readAsText(textFile);\n                        // When it\'s loaded, process it\n                        reader.addEventListener(\'load\', processFile);\n\n                    } else {\n                        alert(\'Please upload a file or enter some text before continuing\')\n                    }\n                } else {\n                    splitText(input);\n                }\n            },\n\n            init() {\n                this.input = bot.inp;\n                this.list = bot.cp.list;\n                this.listLength = this.list.length;\n                this.condList = bot.cp.condList;\n                this.initialRate = bot.rate;\n                this.condArr = this.initCondArr;\n\n                this.presentArr = \'textArr\';\n                this.presentList = \'list\';\n                this.presentListLength = \'listLength\';\n\n                setTimeout(() => {\n                    this.updateList();\n                }, 0);\n            }\n        },\n\n        start() {\n            this.stop();\n\n            this.cp.btn.style.setProperty(\'background\', \'green\');\n\n            this.text.realTypeSetup();\n\n            // if(this.isCondsRunning){\n            //     this.condInterval = setInterval(() => {\n            //         this.text.checkCond();\n            //     }, this.condRate);\n            // }\n            \n            this.botInterval = setInterval(() => {\n                this.runSetup();\n            }, this.rate);\n\n            if(this.isQueueRunning){\n                if (this.text.isFakeType) {\n                    let state = 1;\n                    this.fakeTypeInterval = setInterval(() => {\n                        state++;\n                        if (state > 3) state = 1;\n\n                        let ftmsg = \'Faking typing.\';\n                        switch (state) {\n                            case 2:\n                                ftmsg += \'.\';\n                                break;\n                            case 3:\n                                ftmsg += \'..\';\n                                break;\n                        }\n                        this.text.insertMsg(ftmsg);\n\n                    }, this.text.fakeTypeRate);\n                }\n            }\n\n            this.isRunning = true;\n        },\n\n        stop() {\n            if (this.isRunning) {\n                this.cp.btn.style.setProperty(\'background\', \'red\')\n                clearInterval(this.botInterval);\n                clearInterval(this.fakeTypeInterval);\n                // clearInterval(this.condInterval);\n                this.botInterval = 0;\n                this.fakeTypeInterval = 0;\n                this.isRunning = false;\n            }\n        },\n\n        isLastMsgStrangers(){\n            const lastMsg = this.log.lastChild;\n\n            if(lastMsg){\n                return lastMsg.classList.contains(this.strangerMsgClass);\n            } else return false;\n        },\n\n        runSetup() {\n            if(this.isCondsRunning){\n                this.text.checkCond();\n            }\n\n            if(this.isQueueRunning){\n                if (this.text.isReply) {\n                    try {\n                        if (this.isLastMsgStrangers() || (this.text.isReplyAll && this.text.counter > 0)) {\n                            this.text.insert();\n                            this.sendMsg();\n                        }\n                    } catch (err) {}\n                } else {\n                    this.text.insert();\n                    this.sendMsg();\n                }\n\n                this.isFirstRun = false;\n\n                if (this.text.isRealType) this.start();\n            }\n        },\n\n        sendMsg() {\n            // if(this.btn){\n            this.btn.click();\n            const confirmBtn = document.querySelector(\'.sd-interface button\');\n            confirmBtn ? confirmBtn.click() : null;\n            // } else {\n            //     this.inp.dispatchEvent(new Event(\'focus\'));\n            //     this.inp.dispatchEvent(new KeyboardEvent(\'keypress\',{keyCode:13}));\n            // }\n        },\n\n        leaveIfDisconnected() {\n            if (this.btn.classList.contains(\'disabled\') && this.isAutoNext) {\n                this.btnEsc.click();\n                this.text.reset();\n            }\n        },\n\n        toggle() {\n            if (this.isRunning) {\n                this.stop();\n            } else {\n                this.runSetup();\n                this.start();\n                this.isFirstRun = true;\n            }\n        },\n\n        changeRate(rate, preserveOriginal = false, setVisualValue = false) {\n            this.rate = rate;\n            if (!preserveOriginal) {\n                this.text.initialRate = rate;\n                const time = (this.rate < 1000) ? (Math.floor(this.rate) + \'ms\') : ((this.rate / 1000).toFixed(1) + \'s\');\n                this.cp.rateGauge.textContent = time;\n            }\n            if(setVisualValue) this.cp.rateController.value = rate;\n\n            if (this.isRunning)\n                this.start();\n        },\n\n        toggleAutoNext() {\n            if (this.isAutoNext) {\n                this.cp.btnAutoNext.style.setProperty(\'background\', \'red\')\n            } else {\n                this.cp.btnAutoNext.style.setProperty(\'background\', \'green\')\n            }\n\n            this.isAutoNext = !this.isAutoNext;\n        },\n\n        onOffSpecific(mode = \'queue\', force = null){\n            const btn = mode === \'queue\' ? \'queueBtn\' : \'conditsBtn\';\n            const running = mode === \'queue\' ? \'isQueueRunning\' : \'isCondsRunning\';\n            const otherRunning = mode !== \'queue\' ? \'isQueueRunning\' : \'isCondsRunning\';\n\n            if(force !== this[running]){\n                this.cp[btn].classList.toggle(\'btn-on\');\n                this[running] = !this[running];\n                if(this.isRunning) this.start();\n            }\n\n            // if(this[otherRunning] !== this[running]){ // if one of switches is ON and if list shown is in state diffrent than this one running then switch them\n            //     if(mode === \'queue\'){\n            //         if(this[running] === this.text.isConditsShown){\n            //             this.cp.handleConditsSwitch();\n            //         }\n            //     } else {\n            //         if(this[running] === !this.text.isConditsShown){\n            //             this.cp.handleConditsSwitch();\n            //         }\n            //     }\n            // }\n        },\n\n        init(inputQuery, btnQuery = null, btnEscQuery = null, messageAreaQuery = null, strangerMsgClass = null) {\n            this.btn = btnQuery ? document.querySelector(btnQuery) : null;\n            this.btnEsc = btnEscQuery ? document.querySelector(btnEscQuery) : null;\n            this.inp = inputQuery ? document.querySelector(inputQuery) : null;\n            this.log = messageAreaQuery ? document.querySelector(messageAreaQuery) : null;\n            this.strangerMsgClass = strangerMsgClass;\n\n            setInterval(() => {\n                if(this.isRunning) this.leaveIfDisconnected();\n            }, 1000);\n\n            this.cp.init();\n            this.text.init();\n        },\n    }\n\n    window.bot = bot;\n}\n//6obcy\nbot.init(\'#box-interface-input\', \'button.o-any.o-send\', \'button.o-any.o-esc\', \'#log-dynamic\', \'log-stranger\');\n\n//e-chat.co\n// bot.init(\'#InputTextArea\', \'#SendButton\', \'null\');\n'

#######################################################################
import tkinter as tk
window = tk.Tk()
keyb = Controller()

# with keyb.pressed(Key.ctrl):
#     with keyb.pressed(Key.shift):
#         keyb.press('j')
#         keyb.release('j')

# time.sleep(10)

# with keyb.pressed(Key.ctrl):
#     time.sleep(2)
#     with keyb.pressed(Key.shift):
#         time.sleep(2)
#         keyb.press('j')
#         time.sleep(1)
#         keyb.release('j')

# canvas = tk.Canvas(window, height=700, bg="#222")
# canvas.pack()

# pyautogui.click(500, 400)
# time.sleep(1)
# pyautogui.click(200, 200)
# time.sleep(3)

# from pynput.mouse import Controller, Button
# mouse = Controller()

# time.sleep(1)
# mouse.position = (500, 300)
# time.sleep(0.3)
# mouse.press(Button.left)
# time.sleep(0.3)
# mouse.release(Button.left)

# time.sleep(1)
# pyautogui.moveTo(300, 300, 2) #nah work
# time.sleep(0.5)
# pyautogui.mouseDown()
# time.sleep(0.3)
# pyautogui.mouseUp()


import psutil

def isProcessRunning(processName):
    return processName in (p.name() for p in psutil.process_iter())

browserPaths = {
    'firefox': r'C:\Program Files\Mozilla Firefox\firefox.exe',
    'chrome': r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe',
    'chrome2': r'C:\Program Files\Google\Chrome\Application\chrome.exe'
}

def openTab(browser = 'firefox'):
    path = browserPaths[browser]
    print(path)
    print(os.path.exists(path))
    if os.path.exists(path):
        subprocess.call([path, '-new-tab', siteUrl])
    else:
        subprocess.call([path+'2', '-new-tab', siteUrl])
    return browser

# print(isProcessRunning('firefox.exe'))
# print(isProcessRunning('chrome.exe'))
# while True:
#     time.sleep(1)


# window.mainloop()
#######################################################################

# zezwalaj na wklejanie do firefoxa

noInstall = False
if not noInstall:
    from tkinter import messagebox

    website = '6obcy'
    msgWindowsEnabled = True

    window.eval('tk::PlaceWindow %s center' % window.winfo_toplevel())
    window.withdraw()
    def messageWindow(type, title, msg):
        if(msgWindowsEnabled):
            if type == 'error':
                messagebox.showerror(title, msg)
            elif type == 'warning':
                messagebox.showwarning(title, msg)
            else:
                messagebox.showinfo(title, msg)

    sites = {
        '6obcy': 'https://6obcy.org/rozmowa',
        'e-chat.co': 'echaturl',
        'test': 'https://6obcy.org'
    }
    siteUrl = sites.get(website, None)

    firefoxFound = True

    if siteUrl is None:
        messageWindow('error', 'BloonBot launcher', 'No such website available')
    else:
        messageWindow('warning' ,'BloonBot launcher', 'Bot installation works best on Firefox. Do not use your mouse after you confirm this window. Installing will take about 20 seconds.')
        isFirefoxRunning = isProcessRunning('firefox.exe')
        isChromeRunning = isProcessRunning('chrome.exe')
        time.sleep(2)

        try:
            if isFirefoxRunning:
                launchedBrowser = openTab('firefox')
            elif isChromeRunning:
                launchedBrowser = openTab('chrome')
            else:
                launchedBrowser = openTab('firefox')
        except:
            try:
                launchedBrowser = openTab('chrome')
            except:
                webbrowser.open_new(siteUrl)
                launchedBrowser = 'chrome'
                # firefoxFound = False
                # messageWindow('error', 'BloonBot launcher', 'Firefox or Chrome can not be found.')
                # sys.exit()
                # webbrowser.open_new(siteUrl)
            firefoxFound = False
            
        if launchedBrowser == 'firefox':
            sleeps = {
                'browserLoad': 3,
                'consoleOpen': 3,
                'paste': 2,
                'codeLaunch': 2,
                'consoleClose': 2
            }
            # if not isFirefoxRunning:
                # sleeps['browserLoad'] = 10
        else:
            sleeps = {
                'browserLoad': 6,
                'consoleOpen': 7,
                'paste': 3,
                'codeLaunch': 3,
                'consoleClose': 2
            }
            # if not isChromeRunning:
            #     sleeps['browserLoad'] = 14
        
        i = 0
        while not isProcessRunning(launchedBrowser+'.exe'):
            print(i)
            i+=1
            time.sleep(1)

        time.sleep(sleeps['browserLoad'])
        pyautogui.click(500, 400)

        with keyb.pressed(Key.ctrl):
            with keyb.pressed(Key.shift):
                if launchedBrowser == 'firefox': consoleKey = 'k' # firefox
                else: consoleKey = 'j' #chrome

                keyb.press(consoleKey)
                time.sleep(sleeps['consoleOpen'])
                keyb.release(consoleKey)

        pyperclip.copy(botCode)

        time.sleep(sleeps['paste']) # pasting code after console is open
        keyb.press(Key.ctrl)
        keyb.press('v')
        time.sleep(0.1)
        keyb.release(Key.ctrl)
        keyb.release('v')

        time.sleep(sleeps['codeLaunch']) # pressing enter after pasting code to console
        keyb.press(Key.enter)
        time.sleep(0.1)
        keyb.release(Key.enter)

        time.sleep(sleeps['consoleClose']) # closing console after pressing enter
        keyb.press(Key.f12)
        time.sleep(0.2)
        keyb.release(Key.f12)
        if firefoxFound:
            messageWindow('info', 'BloonBot launcher', 'BloonBot has been installed. You can safely use your mouse now.')
        else:
            messageWindow('warning', 'BloonBot launcher', 'Firefox/Chrome not found. If bot is not correctly installed install one of these browsers and try again.')

    window.deiconify()
    window.destroy()
    window.quit()